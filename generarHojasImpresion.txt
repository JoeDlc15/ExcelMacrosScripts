function main(workbook: ExcelScript.Workbook) {

	let hojaFiltrador = workbook.getWorksheet("Filtrador"); // donde se pegara los datos
	// Desbloquear hoja destino si está protegida (quitar contraseña si no tiene)
	try {
		hojaFiltrador.getProtection().unprotect(); // OPCIONAL: si no tiene contraseña, eliminar este parámetro
	} catch (error) {
		console.log("No se pudo desbloquear o la hoja no estaba protegida.");
	}

	let hojaReporte = workbook.getWorksheet("Reporte"); // donde se pegara los datos
	// Desbloquear hoja destino si está protegida (quitar contraseña si no tiene)
	try {
		hojaReporte.getProtection().unprotect(); // OPCIONAL: si no tiene contraseña, eliminar este parámetro
	} catch (error) {
		console.log("No se pudo desbloquear o la hoja no estaba protegida.");
	}

	hojaFiltrador.activate();

	// Clear ExcelScript.ClearApplyTo.all from range L:R on selectedSheet
	hojaFiltrador.getRange("L:R").clear(ExcelScript.ClearApplyTo.all);

	// copiar datos LPN de la columna A de FILTRADOR a columna O
	hojaFiltrador.getRange("O:O").copyFrom(hojaFiltrador.getRange("A:A"), ExcelScript.RangeCopyType.all, false, false);
	// Quitando duplicados
	hojaFiltrador.getRange("O1:O1000").removeDuplicates([0], true);
	// eliminando espacio vacio q genera la linea anterior
	hojaFiltrador.getRange("O4").getExtendedRange(ExcelScript.KeyboardDirection.down).moveTo(hojaFiltrador.getRange("O3"));
	hojaFiltrador.getRange("O:O").getFormat().autofitColumns();
	// Paste to range S1 on selectedSheet from range P1 on selectedSheet
	hojaFiltrador.getRange("Q1").copyFrom(hojaFiltrador.getRange("O1"), ExcelScript.RangeCopyType.all, false, false);
	// Set range S1:S2 on selectedSheet
	hojaFiltrador.getRange("Q1:Q2").setFormulasLocal([["TOTAL LPN"], ["=CONTAR(O:O)"]]);
//-------------------------------------------------------
	
	let rowCount = hojaFiltrador.getRange("Q2").getValue();

	for (let i = 1; i <= rowCount; i++) {
		let newSheet = hojaReporte.copy(ExcelScript.WorksheetPositionType.before, hojaReporte);
		let sourceRange = hojaFiltrador.getRange(`O${i + 1}`);
		newSheet.getRange("E2:I2").copyFrom(sourceRange, ExcelScript.RangeCopyType.all, false, false);
		newSheet.getProtection().unprotect();
		// Set width of column(s) at range C:C on selectedSheet to 48
		newSheet.getRange("C:C").getFormat().setColumnWidth(48);
		newSheet.getRange("D:E").getFormat().setColumnWidth(65.25);
		newSheet.getRange("G:G").getFormat().setColumnWidth(52.5);
		newSheet.getRange("H:H").getFormat().setColumnWidth(54.75);
		newSheet.getRange("I:I").getFormat().setColumnWidth(61.5);
		newSheet.getRange("J:J").getFormat().setColumnWidth(43.75);
		newSheet.getRange("K:K").getFormat().setColumnWidth(39.75);

		let rango = newSheet.getRange("C1:C450");
		let valores = rango.getValues();

		let ultimaFila = 0;
		for (let i = valores.length - 1; i >= 0; i--) {
			if (valores[i].some(valor => valor !== "")) {
				ultimaFila = i + 2; // Sumamos 2
				break;
			}
		}
		console.log(ultimaFila)
		newSheet.getRange(ultimaFila + ":415").setRowHidden(true);
	}

	let hojasAocultar = ["Datos", "Scan", "Filtrador","Reporte","Staging"]; // Nombres de hojas a ocultar
	let hojas = workbook.getWorksheets();

	for (let hoja of hojas) {
		if (hojasAocultar.includes(hoja.getName())) {
			hoja.setVisibility(ExcelScript.SheetVisibility.hidden);
		}
	}
	console.log("Hojas ocultas antes de la impresión.");

	console.log(`Se crearon ${rowCount} hojas duplicadas.`);
}
